(()=>{"use strict";function e(t){let n="i";if(n+=function(e){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let n="";for(let e=0;e<6;e++)n+=t[(61*Math.random()).toFixed()];return n}(),o=n,t.every((e=>e.id!==o)))return n;var o;e(t)}const t=(e,t="",n,o=0)=>{const s=function(){let e=[];return{getComments:function(){return e},addComment:function(t){e.push(t)}}}(),a=function(){let e=null;return{setDueDate:function(t){const n=new Date(t);!function(e){return!isNaN(e)}(n)?console.error("Date not set: Invalid date"):e=n},getDueDate:function(){return e}}}();return a.setDueDate(n),Object.assign({title:e,description:t,isDone:!1,priority:o},s,a)},n=t("Task","This is an example task","2023-09-09"),o=t("Task 2","This is another example task","2023-12-09"),s=t("Task 3","Yet another example task","2023-12-25"),a=((t,n=null)=>{let o=[];return{title:"Folder",color:n,addTask:function(t){const n=e(o);t.uid=n,o.push(t)},getTasks:function(){return o},removeTask:function(e){const t=o.findIndex((t=>t.uid===e));console.log({index:t}),t>=0&&o.splice(t,1)}}})();a.addTask(n),a.addTask(o),a.addTask(s),console.log("example folder: ",a),console.log("example tasks: ",a.getTasks()),a.removeTask(o.uid),console.log("tasks after deletion: ",a.getTasks())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBb0NBLFNBQVNBLEVBQWFDLEdBQ3BCLElBQUlDLEVBQVMsSUFHYixHQUZBQSxHQVNGLFNBQXVCQyxHQUNyQixNQUFNQyxFQUFhLGlFQUNuQixJQUFJRixFQUFTLEdBRWIsSUFBSyxJQUFJRyxFQUFJLEVBQUdBLEVBYk0sRUFhTUEsSUFHMUJILEdBQVVFLEdBRnFCLEdBQWhCRSxLQUFLQyxVQUNDQyxXQUl2QixPQUFPTixDQUNULENBcEJXTyxHQU5vQkMsRUFRRlIsRUFBVEQsRUFQTFUsT0FBT0MsR0FBU0EsRUFBS0YsS0FBT0EsSUFRdkMsT0FBT1IsRUFUWCxJQUErQlEsRUFXM0JWLEVBQWFDLEVBRWpCLENDM0NBLE1BQU1ZLEVBQU8sQ0FBRUMsRUFBT0MsRUFBYyxHQUFJQyxFQUFTQyxFQUFXLEtBRTFELE1BQU1DLEVBaUJSLFdBQ0UsSUFBSUMsRUFBVyxHQVVmLE1BQU8sQ0FDTEMsWUFURixXQUNFLE9BQU9ELENBQ1QsRUFRRUUsV0FORixTQUFxQkMsR0FDbkJILEVBQVNJLEtBQU1ELEVBQ2pCLEVBTUYsQ0FoQ3lCRSxHQUNqQkMsRUFpQ1IsV0FDRSxJQUFJVCxFQUFVLEtBa0JkLE1BQU8sQ0FDTFUsV0FqQkYsU0FBcUJDLEdBQ25CLE1BQU1DLEVBQVUsSUFBSUMsS0FBTUYsSUFXNUIsU0FBc0JBLEdBQ3BCLE9BQVFHLE1BQU9ILEVBQ2pCLENBWE1JLENBQVlILEdBRVRJLFFBQVFDLE1BQU0sOEJBRG5CakIsRUFBVVksQ0FFZCxFQVlFTSxXQVZGLFdBQ0UsT0FBT2xCLENBQ1QsRUFVRixDQXhEc0JtQixHQUtwQixPQUpBVixFQUFZQyxXQUFZVixHQUlqQm9CLE9BQU9DLE9BQU8sQ0FDbkJ2QixRQUNBQyxjQUNBdUIsUUFMVyxFQU1YckIsWUFFQUMsRUFDQU8sRUFDRixFQ2ZJYyxFQUFjMUIsRUFBSyxPQUFRLDBCQUEyQixjQUN0RDJCLEVBQWUzQixFQUFLLFNBQVUsK0JBQWdDLGNBQzlENEIsRUFBZTVCLEVBQUssU0FBVSwyQkFBNEIsY0FDMUQ2QixFRkpTLEVBQUM1QixFQUFPNkIsRUFBUSxRQUU3QixJQUFJQyxFQUFRLEdBbUJaLE1BQU8sQ0FDTDlCLE1FbEJ5QixTRm1CekI2QixRQUNBRSxRQXBCRixTQUFpQmpDLEdBQ2YsTUFBTWtDLEVBQU05QyxFQUFhNEMsR0FDekJoQyxFQUFLa0MsSUFBTUEsRUFDWEYsRUFBTXJCLEtBQUtYLEVBQ2IsRUFpQkVtQyxTQVJGLFdBQ0UsT0FBT0gsQ0FDVCxFQU9FSSxXQWhCRixTQUFxQkMsR0FDbkIsTUFDTUMsRUFBUU4sRUFBTU8sV0FERnZDLEdBQVVBLEVBQUtrQyxNQUFRRyxJQUV6Q2pCLFFBQVFvQixJQUFJLENBQUNGLFVBQ1RBLEdBQVMsR0FBR04sRUFBTVMsT0FBT0gsRUFBTyxFQUN0QyxFQVlBLEVFdkJvQkksR0FDdEJaLEVBQWNHLFFBQVFOLEdBQ3RCRyxFQUFjRyxRQUFRTCxHQUN0QkUsRUFBY0csUUFBUUosR0FFdEJULFFBQVFvQixJQUFLLG1CQUFvQlYsR0FDakNWLFFBQVFvQixJQUFLLGtCQUFtQlYsRUFBY0ssWUFFOUNMLEVBQWNNLFdBQVdSLEVBQWFNLEtBQ3RDZCxRQUFRb0IsSUFBSyx5QkFBMEJWLEVBQWNLLFciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbG9naWMvZm9sZGVyLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9sb2dpYy90YXNrLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBGb2xkZXIgfVxuXG5jb25zdCBGb2xkZXIgPSAodGl0bGUsIGNvbG9yID0gbnVsbCwpID0+IHtcblxuICBsZXQgdGFza3MgPSBbXVxuXG4gIGZ1bmN0aW9uIGFkZFRhc2sodGFzaykge1xuICAgIGNvbnN0IHVpZCA9IGdlbmVyYXRlVWlkKCB0YXNrcyApO1xuICAgIHRhc2sudWlkID0gdWlkO1xuICAgIHRhc2tzLnB1c2godGFzayk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVUYXNrKCB0YXNrVWlkICl7XG4gICAgY29uc3QgaXNUYXJnZXQgPSAodGFzaykgPT4gIHRhc2sudWlkID09PSB0YXNrVWlkO1xuICAgIGNvbnN0IGluZGV4ID0gdGFza3MuZmluZEluZGV4KCBpc1RhcmdldCApXG4gICAgY29uc29sZS5sb2coe2luZGV4fSlcbiAgICBpZiAoaW5kZXggPj0gMCkgdGFza3Muc3BsaWNlKGluZGV4LCAxKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFza3MoKXtcbiAgICByZXR1cm4gdGFza3NcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdGl0bGUsXG4gICAgY29sb3IsXG4gICAgYWRkVGFzayxcbiAgICBnZXRUYXNrcyxcbiAgICByZW1vdmVUYXNrXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJZEF2YWlsYWJsZSggYXJyYXksIGlkICl7XG4gIHJldHVybiBhcnJheS5ldmVyeSgodGFzaykgPT4gdGFzay5pZCAhPT0gaWQgKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVVaWQoIGlkQXJyYXkgKXtcbiAgbGV0IG91dHB1dCA9ICdpJ1xuICBvdXRwdXQrPSByYW5kb21TdHJpbmcoNik7XG5cbiAgaWYoIGlzSWRBdmFpbGFibGUoaWRBcnJheSwgb3V0cHV0KSApe1xuICAgIHJldHVybiBvdXRwdXRcbiAgfSBlbHNlIHtcbiAgICBnZW5lcmF0ZVVpZCggaWRBcnJheSApXG4gIH1cbn1cblxuZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCBsZW5ndGggKXtcbiAgY29uc3QgY2hhcmFjdGVycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XG4gIGxldCBvdXRwdXQgPSAnJztcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcmFuZG9tID0gTWF0aC5yYW5kb20oKSAqIChjaGFyYWN0ZXJzLmxlbmd0aC0xKSA7XG4gICAgY29uc3QgaW5kZXggPSByYW5kb20udG9GaXhlZCgpO1xuICAgIG91dHB1dCArPSBjaGFyYWN0ZXJzW2luZGV4XVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dFxufSIsImV4cG9ydCB7IFRhc2sgfSBcblxuY29uc3QgVGFzayA9ICggdGl0bGUsIGRlc2NyaXB0aW9uID0gJycsIGR1ZURhdGUsIHByaW9yaXR5ID0gMCApID0+IHtcblxuICBjb25zdCBjb21tZW50TWFuYWdlciA9IENvbW1lbnRNYW5hZ2VyKClcbiAgY29uc3QgZGF0ZU1hbmFnZXIgPSBEYXRlTWFuYWdlcigpXG4gIGRhdGVNYW5hZ2VyLnNldER1ZURhdGUoIGR1ZURhdGUgKVxuXG4gIGxldCBpc0RvbmUgPSBmYWxzZTtcblxuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7XG4gICAgdGl0bGUsXG4gICAgZGVzY3JpcHRpb24sXG4gICAgaXNEb25lLFxuICAgIHByaW9yaXR5XG4gICAgfSxcbiAgICBjb21tZW50TWFuYWdlcixcbiAgICBkYXRlTWFuYWdlclxuICApXG59XG5cbmZ1bmN0aW9uIENvbW1lbnRNYW5hZ2VyKCkge1xuICBsZXQgY29tbWVudHMgPSBbXTtcblxuICBmdW5jdGlvbiBnZXRDb21tZW50cygpe1xuICAgIHJldHVybiBjb21tZW50c1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkQ29tbWVudCggY29tbWVudCApe1xuICAgIGNvbW1lbnRzLnB1c2goIGNvbW1lbnQgKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRDb21tZW50cyxcbiAgICBhZGRDb21tZW50XG4gIH1cbn1cblxuZnVuY3Rpb24gRGF0ZU1hbmFnZXIoKXtcbiAgbGV0IGR1ZURhdGUgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldER1ZURhdGUoIGlucHV0ICl7XG4gICAgY29uc3QgbmV3RGF0ZSA9IG5ldyBEYXRlKCBpbnB1dCApO1xuXG4gICAgaWYoIGRhdGVJc1ZhbGlkKG5ld0RhdGUpICkge1xuICAgICAgZHVlRGF0ZSA9IG5ld0RhdGVcbiAgICB9IGVsc2UgY29uc29sZS5lcnJvcignRGF0ZSBub3Qgc2V0OiBJbnZhbGlkIGRhdGUnKTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gZ2V0RHVlRGF0ZSgpe1xuICAgIHJldHVybiBkdWVEYXRlXG4gIH1cblxuICBmdW5jdGlvbiBkYXRlSXNWYWxpZCggaW5wdXQgKXtcbiAgICByZXR1cm4gIWlzTmFOKCBpbnB1dCApO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXREdWVEYXRlLFxuICAgIGdldER1ZURhdGVcbiAgfVxufSIsImltcG9ydCB7IEZvbGRlciB9IGZyb20gXCIuL2xvZ2ljL2ZvbGRlclwiO1xuaW1wb3J0IHsgVGFzayB9IGZyb20gXCIuL2xvZ2ljL3Rhc2tcIjtcblxuY29uc3QgZXhhbXBsZVRhc2sgPSBUYXNrKCdUYXNrJywgJ1RoaXMgaXMgYW4gZXhhbXBsZSB0YXNrJywgJzIwMjMtMDktMDknKTtcbmNvbnN0IGV4YW1wbGVUYXNrMiA9IFRhc2soJ1Rhc2sgMicsICdUaGlzIGlzIGFub3RoZXIgZXhhbXBsZSB0YXNrJywgJzIwMjMtMTItMDknKTtcbmNvbnN0IGV4YW1wbGVUYXNrMyA9IFRhc2soJ1Rhc2sgMycsICdZZXQgYW5vdGhlciBleGFtcGxlIHRhc2snLCAnMjAyMy0xMi0yNScpO1xuY29uc3QgZXhhbXBsZUZvbGRlciA9IEZvbGRlcignRm9sZGVyJyk7XG5leGFtcGxlRm9sZGVyLmFkZFRhc2soZXhhbXBsZVRhc2spXG5leGFtcGxlRm9sZGVyLmFkZFRhc2soZXhhbXBsZVRhc2syKVxuZXhhbXBsZUZvbGRlci5hZGRUYXNrKGV4YW1wbGVUYXNrMylcblxuY29uc29sZS5sb2coICdleGFtcGxlIGZvbGRlcjogJywgZXhhbXBsZUZvbGRlciApXG5jb25zb2xlLmxvZyggJ2V4YW1wbGUgdGFza3M6ICcsIGV4YW1wbGVGb2xkZXIuZ2V0VGFza3MoKSApXG5cbmV4YW1wbGVGb2xkZXIucmVtb3ZlVGFzayhleGFtcGxlVGFzazIudWlkKVxuY29uc29sZS5sb2coICd0YXNrcyBhZnRlciBkZWxldGlvbjogJywgZXhhbXBsZUZvbGRlci5nZXRUYXNrcygpIClcbiJdLCJuYW1lcyI6WyJnZW5lcmF0ZVVpZCIsImlkQXJyYXkiLCJvdXRwdXQiLCJsZW5ndGgiLCJjaGFyYWN0ZXJzIiwiaSIsIk1hdGgiLCJyYW5kb20iLCJ0b0ZpeGVkIiwicmFuZG9tU3RyaW5nIiwiaWQiLCJldmVyeSIsInRhc2siLCJUYXNrIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsImNvbW1lbnRNYW5hZ2VyIiwiY29tbWVudHMiLCJnZXRDb21tZW50cyIsImFkZENvbW1lbnQiLCJjb21tZW50IiwicHVzaCIsIkNvbW1lbnRNYW5hZ2VyIiwiZGF0ZU1hbmFnZXIiLCJzZXREdWVEYXRlIiwiaW5wdXQiLCJuZXdEYXRlIiwiRGF0ZSIsImlzTmFOIiwiZGF0ZUlzVmFsaWQiLCJjb25zb2xlIiwiZXJyb3IiLCJnZXREdWVEYXRlIiwiRGF0ZU1hbmFnZXIiLCJPYmplY3QiLCJhc3NpZ24iLCJpc0RvbmUiLCJleGFtcGxlVGFzayIsImV4YW1wbGVUYXNrMiIsImV4YW1wbGVUYXNrMyIsImV4YW1wbGVGb2xkZXIiLCJjb2xvciIsInRhc2tzIiwiYWRkVGFzayIsInVpZCIsImdldFRhc2tzIiwicmVtb3ZlVGFzayIsInRhc2tVaWQiLCJpbmRleCIsImZpbmRJbmRleCIsImxvZyIsInNwbGljZSIsIkZvbGRlciJdLCJzb3VyY2VSb290IjoiIn0=