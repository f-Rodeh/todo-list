(()=>{"use strict";const t=(t,n=null,o=null)=>{let s=[];return{title:t,color:n,icon:o,uid:e(),addTask:function(t){const n=e(s);t.uid=n,s.push(t)},getTasks:function(){return s},removeTask:function(t){const e=s.findIndex((e=>e.uid===t));console.log({index:e}),e>=0&&s.splice(e,1)}}};function e(t){let n="i";if(n+=function(t){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let n="";for(let t=0;t<6;t++)n+=e[(61*Math.random()).toFixed()];return n}(),s=n,!(o=t)||o.every((t=>t.id!==s)))return n;var o,s;e(t)}function n(t){if(!t.hasOwnProperty("type"))return;const e=document.createElement(t.type);for(const n in t)"type"!==n&&Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}const o=n({type:"header"});o.append(n({type:"img",src:"https://img.logoipsum.com/246.svg"}),n({type:"span",textContent:"TO DEW"}));const s=n({type:"nav"});s.append(n({type:"span",textContent:"My Folders"}),n({type:"span",textContent:"Personal"}),n({type:"span",textContent:"Do the dishes"}));let p=n({type:"main"});document.body.append(o,s,p);const c=function(t){const e=n({type:"main"});return t?(t.forEach((t=>{const o=function(t){const e=n({type:"div",classList:["folder-card"]});e.dataset.uid=t.uid;const o=`${t.getTasks.length} items`;return e.append(n({type:"h3",textContent:t.title}),n({type:"span",classList:["subtitle"],textContent:o})),e}(t);e.append(o)})),e):e}([t("Example"),t("Example 2")]);var i;i=c,p.replaceWith(i),p=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,