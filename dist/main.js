(()=>{"use strict";const t=(t,n=null,r=null)=>{let a=[];return{title:t,color:n,icon:r,uid:e(),addTask:function(t){const n=e(a);t.uid=n,a.push(t)},getTasks:function(){return a},removeTask:function(t){const e=a.findIndex((e=>e.uid===t));console.log({index:e}),e>=0&&a.splice(e,1)}}};function e(t){let n="i";if(n+=function(t){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";let n="";for(let t=0;t<6;t++)n+=e[(61*Math.random()).toFixed()];return n}(),a=n,!(r=t)||r.every((t=>t.id!==a)))return n;var r,a;e(t)}const n=(t,e="",n,r=0)=>{const a=function(){let t=[];return{getComments:function(){return t},addComment:function(e){t.push(e)}}}(),o=function(){let t=null;return{setDueDate:function(e){const n=new Date(e);!function(t){return!isNaN(t)}(n)?console.warn("Date not set: Invalid date"):t=n},getDueDate:function(){return t}}}();return o.setDueDate(n),Object.assign({title:t,description:e,isDone:!1,priority:r},a,o)};function r(t){if(!t.hasOwnProperty("type"))return;const e=document.createElement(t.type);for(const n in t)"type"!==n&&Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function a(t){if(!t)throw new Error("No icon name provided");const e=document.createElement("ion-icon");return e.classList.add("md","hydrated"),e.setAttribute("role","img"),e.setAttribute("name",t),e}const o=r({type:"header"}),i=document.createElement("div");i.classList.add("logo-container"),i.addEventListener("click",(()=>location.reload())),i.append(r({type:"img",src:"https://img.logoipsum.com/246.svg"}),r({type:"span",textContent:"TO DEW"})),o.append(i);const u=r({type:"nav"});let s=r({type:"main"});function c(t){s.replaceWith(t),s=t}const d=r({type:"div",classList:["new-folder card"]});d.append(a("add-outline"),r({type:"span",textContent:"New Folder",classList:["subtitle"]}));const l=r({type:"main"});function f(t){const e=r({type:"div",classList:["folder card"]});e.dataset.uid=t.uid;let n=t.getTasks().length;const o=document.createElement("div");o.classList.add("icons");const i=a("trash-outline");return o.append(i),e.append(r({type:"h3",textContent:t.title,classList:["title"]}),r({type:"span",classList:["subtitle"],textContent:(u=n,`${u} ${1===u?"task":"tasks"}`)}),o),e;var u}function m(t){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},m(t)}function h(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function g(t){h(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===m(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function v(t){h(1,arguments);var e=g(t);return e.setHours(0,0,0,0),e}function w(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}l.classList.add("dashboard"),l.append(d);var p={};function b(){return p}function y(t,e){var n,r,a,o,i,u,s,c;h(1,arguments);var d=b(),l=w(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.weekStartsOn)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:d.weekStartsOn)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=g(t),m=f.getDay(),v=(m<l?7:0)+m-l;return f.setDate(f.getDate()-v),f.setHours(0,0,0,0),f}function T(t,e){h(2,arguments);var n=g(t),r=g(e),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}function D(t,e){h(2,arguments);var n,r=g(t),a=g(e),o=T(r,a),i=Math.abs(function(t,e){h(2,arguments);var n=g(t),r=g(e);return 12*(n.getFullYear()-r.getFullYear())+(n.getMonth()-r.getMonth())}(r,a));if(i<1)n=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-o*i);var u=T(r,a)===-o;(function(t){h(1,arguments);var e=g(t);return function(t){h(1,arguments);var e=g(t);return e.setHours(23,59,59,999),e}(e).getTime()===function(t){h(1,arguments);var e=g(t),n=e.getMonth();return e.setFullYear(e.getFullYear(),n+1,0),e.setHours(23,59,59,999),e}(e).getTime()})(g(t))&&1===i&&1===T(t,a)&&(u=!1),n=o*(i-Number(u))}return 0===n?0:n}var M={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(t){return t<0?Math.ceil(t):Math.floor(t)}},C="trunc";var k={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function x(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}var E,S={date:x({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:x({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:x({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},P={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function U(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=t.formattingValues[o]||t.formattingValues[a]}else{var i=t.defaultWidth,u=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[u]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function L(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,u=o[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(u))return n}(s):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(u))return n}(s);return i=t.valueCallback?t.valueCallback(c):c,{value:i=n.valueCallback?n.valueCallback(i):i,rest:e.slice(u.length)}}}const W={code:"en-US",formatDistance:function(t,e,n){var r,a=k[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:S,formatRelative:function(t,e,n,r){return P[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:U({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:U({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:U({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:U({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:U({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(E={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(E.matchPattern);if(!n)return null;var r=n[0],a=t.match(E.parsePattern);if(!a)return null;var o=E.valueCallback?E.valueCallback(a[0]):a[0];return{value:o=e.valueCallback?e.valueCallback(o):o,rest:t.slice(r.length)}}),era:L({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:L({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:L({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:L({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:L({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function Y(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}function O(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var N=1440,q=2520,F=43200,A=86400;function H(t,e,n){var r,a;h(2,arguments);var o=b(),i=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:o.locale)&&void 0!==r?r:W;if(!i.formatDistance)throw new RangeError("locale must contain formatDistance property");var u=T(t,e);if(isNaN(u))throw new RangeError("Invalid time value");var s,c,d=Y(Y({},n),{addSuffix:Boolean(null==n?void 0:n.addSuffix),comparison:u});u>0?(s=g(e),c=g(t)):(s=g(t),c=g(e));var l,f=function(t,e,n){h(2,arguments);var r,a=function(t,e){return h(2,arguments),g(t).getTime()-g(e).getTime()}(t,e)/1e3;return((r=null==n?void 0:n.roundingMethod)?M[r]:M[C])(a)}(c,s),m=(O(c)-O(s))/1e3,v=Math.round((f-m)/60);if(v<2)return null!=n&&n.includeSeconds?f<5?i.formatDistance("lessThanXSeconds",5,d):f<10?i.formatDistance("lessThanXSeconds",10,d):f<20?i.formatDistance("lessThanXSeconds",20,d):f<40?i.formatDistance("halfAMinute",0,d):f<60?i.formatDistance("lessThanXMinutes",1,d):i.formatDistance("xMinutes",1,d):0===v?i.formatDistance("lessThanXMinutes",1,d):i.formatDistance("xMinutes",v,d);if(v<45)return i.formatDistance("xMinutes",v,d);if(v<90)return i.formatDistance("aboutXHours",1,d);if(v<N){var w=Math.round(v/60);return i.formatDistance("aboutXHours",w,d)}if(v<q)return i.formatDistance("xDays",1,d);if(v<F){var p=Math.round(v/N);return i.formatDistance("xDays",p,d)}if(v<A)return l=Math.round(v/F),i.formatDistance("aboutXMonths",l,d);if((l=D(c,s))<12){var y=Math.round(v/F);return i.formatDistance("xMonths",y,d)}var k=l%12,x=Math.floor(l/12);return k<3?i.formatDistance("aboutXYears",x,d):k<9?i.formatDistance("overXYears",x,d):i.formatDistance("almostXYears",x+1,d)}function X(t,e){return h(1,arguments),H(t,Date.now(),e)}function j(t){if(h(1,arguments),!function(t){return h(1,arguments),t instanceof Date||"object"===m(t)&&"[object Date]"===Object.prototype.toString.call(t)}(t)&&"number"!=typeof t)return!1;var e=g(t);return!isNaN(Number(e))}function z(t){h(1,arguments);var e=g(t),n=e.getUTCDay(),r=(n<1?7:0)+n-1;return e.setUTCDate(e.getUTCDate()-r),e.setUTCHours(0,0,0,0),e}function Q(t){h(1,arguments);var e=g(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=z(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=z(o);return e.getTime()>=a.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function G(t,e){var n,r,a,o,i,u,s,c;h(1,arguments);var d=b(),l=w(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.weekStartsOn)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:d.weekStartsOn)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=g(t),m=f.getUTCDay(),v=(m<l?7:0)+m-l;return f.setUTCDate(f.getUTCDate()-v),f.setUTCHours(0,0,0,0),f}function R(t,e){var n,r,a,o,i,u,s,c;h(1,arguments);var d=g(t),l=d.getUTCFullYear(),f=b(),m=w(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:f.firstWeekContainsDate)&&void 0!==r?r:null===(s=f.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(l+1,0,m),v.setUTCHours(0,0,0,0);var p=G(v,e),y=new Date(0);y.setUTCFullYear(l,0,m),y.setUTCHours(0,0,0,0);var T=G(y,e);return d.getTime()>=p.getTime()?l+1:d.getTime()>=T.getTime()?l:l-1}function B(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const I=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return B("yy"===e?r%100:r,e.length)},J=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):B(n+1,2)},$=function(t,e){return B(t.getUTCDate(),e.length)},_=function(t,e){return B(t.getUTCHours()%12||12,e.length)},V=function(t,e){return B(t.getUTCHours(),e.length)},K=function(t,e){return B(t.getUTCMinutes(),e.length)},Z=function(t,e){return B(t.getUTCSeconds(),e.length)},tt=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return B(Math.floor(r*Math.pow(10,n-3)),e.length)};var et={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return I(t,e)},Y:function(t,e,n,r){var a=R(t,r),o=a>0?a:1-a;return"YY"===e?B(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):B(o,e.length)},R:function(t,e){return B(Q(t),e.length)},u:function(t,e){return B(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return B(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return B(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return J(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return B(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var a=function(t,e){h(1,arguments);var n=g(t),r=G(n,e).getTime()-function(t,e){var n,r,a,o,i,u,s,c;h(1,arguments);var d=b(),l=w(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:d.firstWeekContainsDate)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),f=R(t,e),m=new Date(0);return m.setUTCFullYear(f,0,l),m.setUTCHours(0,0,0,0),G(m,e)}(n,e).getTime();return Math.round(r/6048e5)+1}(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):B(a,e.length)},I:function(t,e,n){var r=function(t){h(1,arguments);var e=g(t),n=z(e).getTime()-function(t){h(1,arguments);var e=Q(t),n=new Date(0);return n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0),z(n)}(e).getTime();return Math.round(n/6048e5)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):B(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):$(t,e)},D:function(t,e,n){var r=function(t){h(1,arguments);var e=g(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=n-e.getTime();return Math.floor(r/864e5)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):B(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return B(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return B(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return B(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return _(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):V(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):B(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):B(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):K(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Z(t,e)},S:function(t,e){return tt(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return rt(a);case"XXXX":case"XX":return at(a);default:return at(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return rt(a);case"xxxx":case"xx":return at(a);default:return at(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+nt(a,":");default:return"GMT"+at(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+nt(a,":");default:return"GMT"+at(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return B(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return B((r._originalDate||t).getTime(),e.length)}};function nt(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=e||"";return n+String(a)+i+B(o,2)}function rt(t,e){return t%60==0?(t>0?"-":"+")+B(Math.abs(t)/60,2):at(t,e)}function at(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+B(Math.floor(a/60),2)+n+B(a%60,2)}const ot=et;var it=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},ut=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},st={p:ut,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return it(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",it(a,e)).replace("{{time}}",ut(o,e))}};const ct=st;var dt=["D","DD"],lt=["YY","YYYY"];function ft(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var mt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ht=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,gt=/^'([^]*?)'?$/,vt=/''/g,wt=/[a-zA-Z]/;function pt(t,e,n){var r,a,o,i,u,s,c,d,l,f,m,v,p,y,T,D,M,C;h(2,arguments);var k=String(e),x=b(),E=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:x.locale)&&void 0!==r?r:W,S=w(null!==(o=null!==(i=null!==(u=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==u?u:x.firstWeekContainsDate)&&void 0!==i?i:null===(l=x.locale)||void 0===l||null===(f=l.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==o?o:1);if(!(S>=1&&S<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var P=w(null!==(m=null!==(v=null!==(p=null!==(y=null==n?void 0:n.weekStartsOn)&&void 0!==y?y:null==n||null===(T=n.locale)||void 0===T||null===(D=T.options)||void 0===D?void 0:D.weekStartsOn)&&void 0!==p?p:x.weekStartsOn)&&void 0!==v?v:null===(M=x.locale)||void 0===M||null===(C=M.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==m?m:0);if(!(P>=0&&P<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!E.localize)throw new RangeError("locale must contain localize property");if(!E.formatLong)throw new RangeError("locale must contain formatLong property");var U=g(t);if(!j(U))throw new RangeError("Invalid time value");var L=function(t,e){return h(2,arguments),function(t,e){h(2,arguments);var n=g(t).getTime(),r=w(e);return new Date(n+r)}(t,-w(e))}(U,O(U)),Y={firstWeekContainsDate:S,weekStartsOn:P,locale:E,_originalDate:U};return k.match(ht).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,ct[e])(t,E.formatLong):t})).join("").match(mt).map((function(r){if("''"===r)return"'";var a,o,i=r[0];if("'"===i)return(o=(a=r).match(gt))?o[1].replace(vt,"'"):a;var u,s=ot[i];if(s)return null!=n&&n.useAdditionalWeekYearTokens||(u=r,-1===lt.indexOf(u))||ft(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!function(t){return-1!==dt.indexOf(t)}(r)||ft(r,e,String(t)),s(L,r,E.localize,Y);if(i.match(wt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}function bt(t){const e=document.createElement("span");e.classList.add("small-badge");const n=function(t){const e=t?function(t){return h(1,arguments),function(t,e){h(2,arguments);var n=v(t),r=v(e);return n.getTime()===r.getTime()}(t,Date.now())}(t)?{msg:"Due today",color:"var(--purple-pink)"}:function(t){return h(1,arguments),g(t).getTime()<Date.now()}(t)?function(t){return{msg:`Due ${X(t)} ago`,color:"var(--red)"}}(t):function(t,e){return h(1,arguments),function(t,e,n){h(2,arguments);var r=y(t,n),a=y(e,n);return r.getTime()===a.getTime()}(t,Date.now(),e)}(t)?function(t){return{msg:`Due by ${pt(t,"EEEE")}`,color:"var(--teal)"}}(t):function(t){return{msg:`Due by ${pt(t,"MMM dd")}`,color:"var(--blue)"}}(t):{msg:"No due date",color:"var(--gray)"};return e}(t);return e.textContent=n.msg,e.style.backgroundColor=n.color,e}const yt=document.createElement("div");function Tt(t){const e=document.createElement("div");e.classList.add("task","card"),e.dataset.uid=t.uid;const n=r({type:"h3",classList:["title"],textContent:Dt(32,t.title)}),o=r({type:"span",classList:["subtitle"],textContent:Dt(50,t.description)}),i=document.createElement("div");i.classList.add("tags"),i.append(bt(t.getDueDate()),function(t){const e=document.createElement("span");if(!t>0)return e;e.classList.add("priority","small-badge"),e.textContent="Important ",e.style.backgroundColor="var(--sand)";for(let n=0;n<t;n++){const t=a("alert-circle-outline");e.append(t)}return e}(t.priority));const u=document.createElement("div");u.classList.add("icons");const s=a("trash-outline");return u.append(s),e.append(n,o,i,u),e}function Dt(t,e=""){if(e)return e.length<=t?e:e.substring(0,t-3)+"..."}yt.classList.add("new-task","card"),yt.append(a("add-outline"),r({type:"span",textContent:"New Task",classList:["title"]}));const Mt=document.createElement("h2"),Ct=document.createElement("p"),kt=document.createElement("p");let xt=[];function Et(t,e){const n=document.querySelector("nav"),r=document.createElement("span");r.textContent=t,r.dataset.tabIndex=xt.length,r.addEventListener("click",(()=>{var t;c(e),t=r.dataset.tabIndex,xt=xt.slice(0,t+1),function(t){const e=document.querySelector("nav").childNodes;for(let n=e.length-1;n>t;n--)e[n].remove()}(r.dataset.tabIndex)})),n.append(r),xt.push(e)}function St(t,e,n){const r=document.createElement("label");r.textContent=e,r.setAttribute("for",n);const a=document.createElement("input");a.id=n,a.type=t;const o=document.createElement("div");return o.append(r,a),o}function Pt(t,e){return{build:function(n){const r=St("text",t,n);return r.querySelector("input").maxLength=e,r}}}function Ut(t){const e=function(){const t=r({type:"div",classList:["modal background"]}),e=r({type:"div",classList:["modal foreground"]}),n=document.createElement("div");n.classList.add("content");const a=function(){const t=document.createElement("div");t.classList.add("actions");const e=r({type:"button",textContent:"Cancel"});e.classList.add("cancel","outlined");const n=r({type:"button",textContent:"Okay!"});return n.classList.add("confirm","filled"),t.append(e,n),{root:t,setMainAction:t=>{n.addEventListener("click",t)},setCancelAction:t=>{e.addEventListener("click",t)}}}();function o(){t.remove()}return a.setCancelAction(o),e.append(n,a.root),t.append(e),document.body.append(t),t.addEventListener("click",(e=>{e.target===t&&o()})),{content:n,setMainAction:t=>{a.setMainAction(t)},dismiss:o}}();for(const n in t){if(!t.hasOwnProperty(n))return;const r=t[n].build(n);e.content.append(r)}return e}function Lt(t){let e={};return t.querySelectorAll("input").forEach((t=>{e[t.id]=t.value})),e}document.body.append(o,u,s);const Wt=n("This is a super long title that should be","Short description","",2),Yt=n("Task 2","This is a super long description that should be cropped","2023-5-9",1),Ot=n("Task 3","","2023-9-4",2),Nt=n("Task 4","","2023-09-6"),qt=n("Task 5","","2023-12-11"),Ft=t("Example 1"),At=t("Example 2");Ft.addTask(Wt),Ft.addTask(Yt),Ft.addTask(Ot),Ft.addTask(Nt),Ft.addTask(qt);let Ht,Xt=[Ft,At];const jt=function(t){return t?(t.forEach((t=>{const e=f(t);l.append(e)})),l):l}(Xt);function zt(t){t.addEventListener("click",(()=>{!function(t){const e=function(t){const e=document.createElement("main"),n=t.getDueDate();return Mt.textContent=t.title,Ct.textContent=t.description,kt.textContent=j(n)?`Due date: ${pt(n,"MMM dd, yyyy")}`:"No due date",e.append(Mt,kt,Ct,document.createElement("div")),e}(t);c(e),Et(t.title,e)}(function(t){if(!Ht)throw new Error("No folder currently open");return Ht.getTasks().find((e=>e.uid===t))}(t.dataset.uid))}))}function Qt(t){t.addEventListener("click",(()=>{const e=t.dataset.uid;Ht=function(t){return Xt.find((e=>e.uid===t))}(e),function(t){const e=function(t){const e=document.createElement("main"),n=function(t){const e=document.createElement("section");return e.append(yt),e.id="task-list",t.forEach((t=>{const n=Tt(t);e.append(n)})),e}(t.getTasks());return e.append(n),e}(t);c(e),Et(t.title,e),document.querySelectorAll(".task").forEach((t=>zt(t)))}(Ht)}))}c(jt),Et("My Folders",jt),document.querySelectorAll(".folder").forEach((t=>{Qt(t)}));const Gt={title:Pt("Title")},Rt={title:Pt("Title",32),description:Pt("Description",280),dueDate:("Due Date",{build:function(t){return St("date","Due Date",t)}}),priority:{build:function(t){const e=St("number","Priority",t),n=e.querySelector("input");return n.defaultValue=0,n.min=0,n.max=3,e}}};d.addEventListener("click",(function(){const e=Ut(Gt);e.setMainAction((()=>{const n=Lt(e.content),r=t(n.title),a=f(r);Xt.push(r),jt.append(a),Qt(a),e.dismiss()}))})),yt.addEventListener("click",(function(){const t=Ut(Rt);t.setMainAction((()=>{const e=Lt(t.content),r=document.querySelector("#task-list"),a=n(e.title,e.description,e.dueDate,e.priority);Ht.addTask(a);const o=Tt(a);r.append(o),zt(o),t.dismiss()}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,